// <auto-generated />
using System;
using ECOM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECOM.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250715132534_DropCommentsTable_v2")]
    partial class DropCommentsTable_v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECOM.Data.Addresses", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<DateTime?>("AdditionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ADDITION_TIME");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("AddressName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADDRESS_NAME");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CITY_ID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DISTRICT_ID");

                    b.Property<int>("NeighbourhoodId")
                        .HasColumnType("int")
                        .HasColumnName("NEIGHBOURHOOD_ID");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("RECEIVER_ID");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NeighbourhoodId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("ADDRESSES", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandID"));

                    b.Property<DateTime?>("AdditionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ADDITION_TIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("BrandID");

                    b.ToTable("BRANDS", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<DateTime?>("AdditionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ADDITION_TIME");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CVV");

                    b.Property<string>("CardNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CARD_NO");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CARDS", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<int?>("DCouponId")
                        .HasColumnType("int")
                        .HasColumnName("DCOUPON_ID");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<int?>("Piece")
                        .HasColumnType("int")
                        .HasColumnName("PIECE");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SELLER_ID");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TOTAL_PRICE");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DCouponId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("CART", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("CityId");

                    b.ToTable("CITY", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Comments", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ECOM.Data.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime?>("AdditionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ADDITION_TIME");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BIRTHDATE");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("GENDER");

                    b.Property<bool?>("IsCustomer")
                        .HasColumnType("bit")
                        .HasColumnName("IS_CUSTOMER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PHONE");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SURNAME");

                    b.HasKey("CustomerId");

                    b.ToTable("CUSTOMERS", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.DCoupon", b =>
                {
                    b.Property<int>("DCouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DCouponId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<DateTime?>("DefinitionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DEFINITION_DATE");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<int>("SCouponId")
                        .HasColumnType("int")
                        .HasColumnName("S_COUPON_ID");

                    b.HasKey("DCouponId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SCouponId");

                    b.ToTable("D_COUPONS", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CITY_ID");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId");

                    b.ToTable("DISTRICT", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Favorites", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<DateTime?>("AdditionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ADDITION_TIME");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("PRODUCT_ID");

                    b.HasKey("FavoriteId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("FAVORITES", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NEW_VALUE");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OLD_VALUE");

                    b.Property<DateTime?>("ProcessTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("PROCESS_TIME");

                    b.Property<string>("ProcessType")
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("PROCESS_TYPE");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TABLE_NAME");

                    b.HasKey("LogId");

                    b.ToTable("LOG", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Neighbourhood", b =>
                {
                    b.Property<int>("NeighbourhoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NeighbourhoodId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CITY_ID");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DISTRICT_ID");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("NeighbourhoodId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("NEIGHBOURHOODS", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.OrderHistory", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("CARD_ID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DELIVERY_DATE");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ORDER_DATE");

                    b.Property<int?>("Piece")
                        .HasColumnType("int")
                        .HasColumnName("PIECE");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SELLER_ID");

                    b.HasKey("OrderId");

                    b.HasIndex("CardId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("ORDER_HISTORY", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime?>("AdditionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ADDITION_TIME");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BRAND_ID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IMAGE_PATH");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PRICE");

                    b.Property<float?>("Score")
                        .HasColumnType("real")
                        .HasColumnName("SCORE");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SELLER_ID");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SUB_CATEGORY_ID");

                    b.Property<int>("SupCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SUP_CATEGORY_ID");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("SupCategoryId");

                    b.ToTable("PRODUCTS", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.ProductCategories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime?>("AdditionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ADDITION_TIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<bool>("Type")
                        .HasColumnType("bit")
                        .HasColumnName("TYPE");

                    b.HasKey("CategoryId");

                    b.ToTable("PRODUCT_CATEGORIES", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.SCoupon", b =>
                {
                    b.Property<int>("SCouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SCouponId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AMOUNT");

                    b.Property<decimal?>("LowerLimit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("LOWER_LIMIT");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("VALIDITY_DATE");

                    b.HasKey("SCouponId");

                    b.ToTable("S_COUPONS", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellerId"));

                    b.Property<DateTime?>("AdditionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ADDITION_TIME");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<float?>("Score")
                        .HasColumnType("real")
                        .HasColumnName("SCORE");

                    b.HasKey("SellerId");

                    b.ToTable("SELLERS", (string)null);
                });

            modelBuilder.Entity("ECOM.Data.Addresses", b =>
                {
                    b.HasOne("ECOM.Data.City", "City")
                        .WithMany("CityOfAddresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Customers", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.District", "District")
                        .WithMany("DistrictOfAddresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Neighbourhood", "Neighbourhood")
                        .WithMany("NeighbourhoodOfAddresss")
                        .HasForeignKey("NeighbourhoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Customers", "Receiver")
                        .WithMany("ReceiverAddresses")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Customer");

                    b.Navigation("District");

                    b.Navigation("Neighbourhood");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("ECOM.Data.Card", b =>
                {
                    b.HasOne("ECOM.Data.Customers", "Customer")
                        .WithMany("Cards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECOM.Data.Cart", b =>
                {
                    b.HasOne("ECOM.Data.Customers", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.DCoupon", "Coupon")
                        .WithMany("Carts")
                        .HasForeignKey("DCouponId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ECOM.Data.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Seller", "Seller")
                        .WithMany("Carts")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ECOM.Data.Comments", b =>
                {
                    b.HasOne("ECOM.Data.Customers", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECOM.Data.DCoupon", b =>
                {
                    b.HasOne("ECOM.Data.Customers", "Customer")
                        .WithMany("Coupons")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.SCoupon", "Coupon")
                        .WithMany("Coupons")
                        .HasForeignKey("SCouponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECOM.Data.District", b =>
                {
                    b.HasOne("ECOM.Data.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ECOM.Data.Favorites", b =>
                {
                    b.HasOne("ECOM.Data.Customers", "Customer")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECOM.Data.Neighbourhood", b =>
                {
                    b.HasOne("ECOM.Data.City", "City")
                        .WithMany("Neighbourhoods")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.District", "District")
                        .WithMany("Neighbourhoods")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("ECOM.Data.OrderHistory", b =>
                {
                    b.HasOne("ECOM.Data.Card", "Card")
                        .WithMany("Orders")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Customers", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Seller", "Seller")
                        .WithMany("Orders")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ECOM.Data.Product", b =>
                {
                    b.HasOne("ECOM.Data.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.Seller", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.ProductCategories", "SubCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECOM.Data.ProductCategories", "SupCategory")
                        .WithMany("SupCategories")
                        .HasForeignKey("SupCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Seller");

                    b.Navigation("SubCategory");

                    b.Navigation("SupCategory");
                });

            modelBuilder.Entity("ECOM.Data.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECOM.Data.Card", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECOM.Data.City", b =>
                {
                    b.Navigation("CityOfAddresses");

                    b.Navigation("Districts");

                    b.Navigation("Neighbourhoods");
                });

            modelBuilder.Entity("ECOM.Data.Customers", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("Coupons");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");

                    b.Navigation("ReceiverAddresses");
                });

            modelBuilder.Entity("ECOM.Data.DCoupon", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("ECOM.Data.District", b =>
                {
                    b.Navigation("DistrictOfAddresses");

                    b.Navigation("Neighbourhoods");
                });

            modelBuilder.Entity("ECOM.Data.Neighbourhood", b =>
                {
                    b.Navigation("NeighbourhoodOfAddresss");
                });

            modelBuilder.Entity("ECOM.Data.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECOM.Data.ProductCategories", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("SupCategories");
                });

            modelBuilder.Entity("ECOM.Data.SCoupon", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("ECOM.Data.Seller", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
