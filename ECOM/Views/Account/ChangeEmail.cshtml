@model string



<div class="modal-body" id="verificationSection">
    <form id="verificationForm">
        <div class="mb-3">
            <label class="form-label">Kod</label>
            <input type="text" class="form-control" name="code" required>
        </div>
        <button id="verificationCode" type="submit" class="btn btn-success">Doğrula</button>
    </form>
    <!-- Geri sayım göstergesi -->
    <div class="mb-2 text-muted mt-3" >
        Kalan süre: <span id="countdownTimer">02:00</span>
    </div>
</div>

<div class="modal-body" id="userSection" style="display:none">
    <form id="userForm">
        <div class="mb-3">
            <label class="form-label">E-Posta</label>
            <input type="email" class="form-control" name="Email" required>
        </div>
        <button type="submit" class="btn btn-success">Kaydet</button>
    </form>
</div>

<script>
    let otpStartTime = null; // Başlangıç zamanı
    let otpInterval = null;
    const otpTimeout = 2 * 60 * 1000; // 2 dakika (ms cinsinden)

    // Zamanlayıcı başlatma fonksiyonu
    function startOtpTimer() {
        const countdownEl = $("#countdownTimer");
        otpStartTime = new Date().getTime();

        if (otpInterval) clearInterval(otpInterval);

        otpInterval = setInterval(function () {
            const now = new Date().getTime();
            const remaining = otpTimeout - (now - otpStartTime);

            if (remaining <= 0) {
                clearInterval(otpInterval);
                countdownEl.text("00:00");
                alert("Kodun süresi doldu. Lütfen yeniden kod isteyin.");
                $("#verificationCode").prop("disabled", true);
                return;
            }

            const minutes = Math.floor((remaining / 1000) / 60);
            const seconds = Math.floor((remaining / 1000) % 60);
            countdownEl.text(
                `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`
            );
        }, 1000);
    }

    // Modal açıldığında zaman başlasın
    $(document).on('shown.bs.modal', '#myModal', function () {
        $("#verificationCode").prop("disabled", false);
        $("#countdownTimer").text("02:00");
        startOtpTimer();
    });

    // Modal kapandığında sıfırla
    $(document).on('hidden.bs.modal', '#myModal', function () {
        clearInterval(otpInterval);
        otpStartTime = null;
    });


    $(document).on("submit", "#verificationForm", function (e) {
        e.preventDefault();

        // Süre dolmuş mu kontrol et
        const now = new Date().getTime();
        if (!otpStartTime || (now - otpStartTime) > otpTimeout) {
            alert("Kodun süresi doldu. Lütfen yeniden kod isteyin.");
            return;
        }


        // Form verisi + model değeri birlikte gönderilecek
        const formData = $(this).serialize() + "&modelCode=@Model";

        $.post("/Account/CheckOTPCode", formData, function (result) {
            if (result.success) {
                alert(result.message);

                // Doğrulama başarılıysa: verificationForm gizle, userForm göster
                $("#verificationSection").hide();
                $("#userSection").show();

            } else {
                alert(result.message);

                // Başarısızsa: userForm gizli kalsın, verificationForm görünür olsun
                $("#userSection").hide();
                $("#verificationSection").show();
            }
        }).fail(function () {
            alert("Sunucuya bağlanırken hata oluştu.");
        });
    });
</script>